Msat = predict(object = m3, newdata = ASlm)
)
G <- cbind.data.frame(temperature = AS$temperature,
values = rep(NA, length(AS$temperature)))
for (i in 1:length(AS$temperature)) {
M1 <- starting_percentage/100*AS$Msat[i]
M2 <- desired_percentage/100*AS$Msat[i]
G$values[i] <-
AS$sat[i]*(M2-M1)/(AS$Msat[i]-(AS$specVol[i]/1000*132.14*AS$Msat[i]*M2))
}
G$values <- G$values*initial_volume/1000
return(paste("Add ",
round(G[G$temperature == temperature, "values"],
digits = 2),
" g of ammonium sulfate to your ",
initial_volume,
" mL solution to crank up the ammonium sulfate saturation from ",
starting_percentage, "%", " to ", desired_percentage,
"% at a sizzling ",
temperature,
"째C! Get ready to rock that protein precipitation!", sep = ""))
}
devtools::document(saltify())
devtools::document(saltify
)
devtools::document()
saltify()
devtools::document()
devtools::document()
devtools::install()
library(evobioqR)
devtools::document()
devtools::install()
devtools::install()
library(evobioqR)
remove.packages("evobioqR")
remove.packages("evobioqR")
devtools::install()
library(evobioqR)
remove.packages("evobioqR")
devtools::document()
devtools::install()
library(evobioqR)
devtools::document()
remove.packages("evobioqR")
devtools::install()
remove.packages("evobioqR")
devtools::install()
devtools::document()
remove.packages("evobioqR")
devtools::install()
library(evobioqR)
#' @references
#' Wingfield, P. (1998). Protein precipitation using ammonium sulfate.
#' *Current protocols in protein science, 13*(1), A-3F.
#'
#' @examples
#' # Example: Calculate the amount of ammonium sulfate for a 100 mL solution
#' # with a starting saturation of 30%, a desired saturation of 50%, and a temperature of 20째C.
#' saltify(100, 50, 30, 20)
#'
#' @export
saltify <- function(initial_volume, desired_percentage, starting_percentage, temperature) {
# Density and molarity of ammonium sulfate solutions
AS <- data.frame(
temperature = c(0, 10, 20, 25),
specVol = c(0.5281, 0.5357, 0.5414, 0.5435),
sat = c(515.35, 524.60, 536.49, 541.80),
Msat = c(3.90, 3.97, 4.06, 4.10)
)
# Create linear models to estimate values for temperatures 0 to 25
m1 <- lm(specVol ~ temperature, data = AS)
m2 <- lm(sat ~ temperature, data = AS)
m3 <- lm(Msat ~ temperature, data = AS)
# Generate predicted values for temperatures 0 to 25
temp_range <- 0:25
AS_full <- data.frame(
temperature = temp_range,
specVol = predict(m1, newdata = data.frame(temperature = temp_range)),
sat = predict(m2, newdata = data.frame(temperature = temp_range)),
Msat = predict(m3, newdata = data.frame(temperature = temp_range))
)
# Initialize result storage
G <- data.frame(
temperature = AS_full$temperature,
values = rep(NA, length(AS_full$temperature))
)
# Calculate the required ammonium sulfate for each temperature
for (i in seq_along(AS_full$temperature)) {
M1 <- starting_percentage / 100 * AS_full$Msat[i]
M2 <- desired_percentage / 100 * AS_full$Msat[i]
G$values[i] <- AS_full$sat[i] * (M2 - M1) /
(AS_full$Msat[i] - (AS_full$specVol[i] / 1000 * 132.14 * AS_full$Msat[i] * M2))
}
# Scale by initial volume
G$values <- G$values * initial_volume / 1000
# Extract and format the result for the specified temperature
result <- round(G[G$temperature == temperature, "values"], digits = 2)
# Return formatted output message
return(paste(
"Add ", result, " g of ammonium sulfate to your ", initial_volume,
" mL solution to crank up the ammonium sulfate saturation from ",
starting_percentage, "% to ", desired_percentage,
"% at a sizzling ", temperature, "째C! Get ready to rock that protein precipitation!",
sep = ""
))
}
saltify(100, 50, 30, 20)
remove.packages("evobioqR")
devtools::install()
library(evobioqR)
remove.packages("evobioqR")
devtools::install()
remove.packages("evobioqR")
devtools::document()
devtools::install()
library(evobioqR)
saltify(100, 60, 0, 18)
remove.packages("evobioqR")
devtools::document()
devtools::install()
devtools::install_bitbucket("Grantlab/bio3d/bio3d-core", ref="core")
devtools::install_bitbucket("Grantlab/bio3d-view")
bio3d.view::view.pdb(pdb = "7BKB")
library(bio3d)
pdb <- read.fasta.pdb("7BKB")
pdb <- read.fasta.pdb(file = "7BKB")
pdb <- read.pdb(file = "7BKB")
pdb
bio3d.view::view.pdb(pdb)
bio3d.view::visualize.pdb(pdb)
install.packages("rgl")
bio3d.view::view.pdb(pdb)
devtools::document()
remove.packages("evobioqR")
devtools::install()
library(evobioqR)
remove.packages("evobioqR")
devtools::document()
devtools::install()
library(evobioqR)
devtools::check()
devtools::check()
#' @references
#' Wingfield, P. (1998). Protein precipitation using ammonium sulfate.
#' \emph{Current protocols in protein science}, \bold{13(1)}, A-3F.
#'
#' @examples
#' # Example: Calculate the amount of ammonium sulfate for a 100 mL solution
#' # with a starting saturation of 30%, a desired saturation of 50%, and a temperature of 20째C.
#' saltify(100, 50, 30, 20)
#'
#' @export
saltify <- function(initial_volume,
desired_percentage,
starting_percentage,
temperature) {
# Density and molarity of ammonium sulfate solutions
AS <- data.frame(
temperature = c(0, 10, 20, 25),
specVol = c(0.5281, 0.5357, 0.5414, 0.5435),
sat = c(515.35, 524.60, 536.49, 541.80),
Msat = c(3.90, 3.97, 4.06, 4.10)
)
# Create linear models to estimate values for temperatures 0 to 25
m1 <- lm(specVol ~ temperature, data = AS)
m2 <- lm(sat ~ temperature, data = AS)
m3 <- lm(Msat ~ temperature, data = AS)
# Generate predicted values for temperatures 0 to 25
temp_range <- 0:25
AS_full <- data.frame(
temperature = temp_range,
specVol = predict(m1, newdata = data.frame(temperature = temp_range)),
sat = predict(m2, newdata = data.frame(temperature = temp_range)),
Msat = predict(m3, newdata = data.frame(temperature = temp_range))
)
# Initialize result storage
G <- data.frame(
temperature = AS_full$temperature,
values = rep(NA, length(AS_full$temperature))
)
# Calculate the required ammonium sulfate for each temperature
for (i in seq_along(AS_full$temperature)) {
M1 <- starting_percentage / 100 * AS_full$Msat[i]
M2 <- desired_percentage / 100 * AS_full$Msat[i]
G$values[i] <- AS_full$sat[i] * (M2 - M1) /
(AS_full$Msat[i] - (AS_full$specVol[i] / 1000 * 132.14 * AS_full$Msat[i] * M2))
}
# Scale by initial volume
G$values <- G$values * initial_volume / 1000
# Extract and format the result for the specified temperature
result <- round(G[G$temperature == temperature, "values"], digits = 2)
# Return formatted output message
return(paste(
"Add ", result, " g of ammonium sulfate to your ", initial_volume,
" mL solution to crank up the ammonium sulfate saturation from ",
starting_percentage, "% to ", desired_percentage,
"% at a sizzling ", temperature,
"\u00B0C! Get ready to rock that protein precipitation!",
sep = ""
))
}
saltify(100, 50, 30, 20)
devtools::check()
remove.packages("evobioqR")
remove.packages("evobioqR")
devtools::install_github("JPFQueiroz/evobioqR")
BiocManager::install("coRdon")
knitr::opts_chunk$set(echo = TRUE)
# load packages
library(tidyverse)
library(bioseq)
# load native sequences as tibble
native <- read_fasta(file = "HcgG_CDS.fasta", type = "DNA") %>%
as_tibble.bioseq_dna()
# load codon optimized sequences
codonOptimized <- read_fasta(file = "HcgG_codon_optimized.fasta",
type = "DNA") %>%
as_tibble.bioseq_dna()
# load codon usage tables from KazUSA
aeolicus <- read_table(file = "codon_usage_Methanococcus_aeolicus.txt",
col_names = c("aa", "codon", "counts", "per1000"))
remove.packages("evobioqR")
devtools::document()
devtools::check()
devtools::install()
devtools::check()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
pkgload::dev_help('harmonify')
devtools::document()
devtools::document()
devtools::document()
devtools::document()
remove.packages("evobioqR")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
system.file("extdata", "EcolTestSeq.txt", package = "evobioqR")
devtools::check()
#' codonTableDestination <- system.file("extdata", "EcolCUB.txt", package = "evobioqR")
#' harmonify(seq_path = seq_path,
#'           numMutants = 3,
#'           windowSize = 10,
#'           measure = "MM",
#'           outName = "CHARMING_tutorial",
#'           codonTableOrigin = codonTableOrigin,
#'           codonTableDestination = codonTableDestination)
#'
#' @export
harmonify <- function(seq_path,
numMutants,
windowSize,
measure,
outName,
codonTableOrigin,
codonTableDestination) {
args <- c("RStudio",
seq_path,
numMutants,
windowSize,
measure,
outName,
codonTableOrigin,
codonTableDestination)
cat(args, "\n")
# Check if harmonizing sequence to native species
if (length(args) == 7) {
nucSeq <- readInputSeq(args[2])
numHarmonized <- as.integer(args[3])
windowSize <- as.integer(args[4])
model <- args[5]
outName <- args[6]
freqDict <- readCUBTable(args[7])
aaFreqDict <- generateAAFreqDict(freqDict, aaDict)
codonSeq <- generateCodonSeq(nucSeq$stringSeq)
randomSeeds <- generateRandomSeqs(codonSeq, numHarmonized * 10)
outputs <- list()
counter <- 0
if (model == "MM") {
targetVals <- calculateMinMax(codonSeq, aaFreqDict, freqDict, mapDict,
windowSize)
for (sequence in randomSeeds) {
initVals <- calculateMinMax(sequence, aaFreqDict, freqDict, mapDict,
windowSize)
result <- harmonizedSeqErrorCorrection(sequence, initVals, targetVals,
freqDict, aaFreqDict, NULL,
windowSize, model)
finalSeq <- result[[1]]
finalVals <- result[[2]]
finalDist <- sum(abs(finalVals - targetVals))
outputs[[counter + 1]] <- list(finalDist, finalSeq, finalVals)
counter <- counter + 1
if (counter %% 10 == 0) {
cat("Harmonized mutant #", counter %/% 10, "complete\n")
}
}
} else if (model == "GM") {
targetVals <- calculateWindowedCAI(freqDict, codonSeq, windowSize)
for (sequence in randomSeeds) {
initVals <- calculateWindowedCAI(freqDict, sequence, windowSize)
result <- harmonizedSeqErrorCorrection(sequence, initVals, targetVals,
freqDict, NULL, freqDict,
windowSize, model)
finalSeq <- result[[1]]
finalVals <- result[[2]]
finalDist <- sum(abs(finalVals - targetVals))
outputs[[counter + 1]] <- list(finalDist, finalSeq, finalVals)
counter <- counter + 1
if (counter %% 10 == 0) {
cat("Harmonized mutant #", counter %/% 10, "complete\n")
}
}
}
# When harmonizing from one species for production in another
} else if (length(args) == 8) {
nucSeq <- readInputSeq(args[2])
numHarmonized <- as.integer(args[3])
windowSize <- as.integer(args[4])
model <- args[5]
outName <- args[6]
freqDictNative <- readCUBTable(args[7])
freqDictHost <- readCUBTable(args[8])
aaFreqDictNative <- generateAAFreqDict(freqDictNative, aaDict)
aaFreqDictHost <- generateAAFreqDict(freqDictHost, aaDict)
codonSeq <- generateCodonSeq(nucSeq$stringSeq)
randomSeeds <- generateRandomSeqs(codonSeq, numHarmonized * 10)
# Swap first two sequences in randomSeeds with the WT sequence
randomSeeds[[1]] <- codonSeq
if (length(randomSeeds) > 1) {
randomSeeds[[2]] <- codonSeq
}
outputs <- list()
counter <- 0
if (model == "MM") {
targetVals <- calculateMinMax(codonSeq, aaFreqDictNative, freqDictNative,
mapDict, windowSize)
unharmonizedVals <- calculateMinMax(codonSeq, aaFreqDictHost, freqDictHost,
mapDict, windowSize)
for (sequence in randomSeeds) {
if (counter == 0) { # Use rodriguez harmonization to initialize first sequence
initResult <- initializeHarmonizedSequence(sequence, freqDictNative,
freqDictHost, aaFreqDictHost,
NULL, windowSize, model)
initSeq <- initResult[[1]]
initVals <- initResult[[2]]
finalResult <- harmonizedSeqErrorCorrection(initSeq, initVals,
targetVals, freqDictHost,
aaFreqDictHost, NULL,
windowSize, model)
} else {
initVals <- calculateMinMax(sequence, aaFreqDictHost, freqDictHost,
mapDict, windowSize)
finalResult <- harmonizedSeqErrorCorrection(sequence, initVals,
targetVals, freqDictHost,
aaFreqDictHost, NULL,
windowSize, model)
}
finalSeq <- finalResult[[1]]
finalVals <- finalResult[[2]]
finalDist <- sum(abs(finalVals - targetVals))
outputs[[counter + 1]] <- list(finalDist, finalSeq, finalVals)
counter <- counter + 1
if (counter %% 10 == 0) {
cat("Harmonized mutant #", counter %/% 10, "complete\n")
}
}
} else if (model == "GM") {
targetVals <- calculateWindowedCAI(freqDictNative, codonSeq, windowSize)
unharmonizedVals <- calculateWindowedCAI(freqDictHost, codonSeq, windowSize)
for (sequence in randomSeeds) {
if (counter == 0) { # Use Rodriguez harmonization to initialize first sequence
initResult <- initializeHarmonizedSequence(sequence, freqDictNative,
freqDictHost, aaFreqDictHost,
freqDictHost, windowSize,
model)
initSeq <- initResult[[1]]
initVals <- initResult[[2]]
finalResult <- harmonizedSeqErrorCorrection(initSeq, initVals,
targetVals, freqDictHost,
aaFreqDictHost,
freqDictHost, windowSize,
model)
} else {
initVals <- calculateWindowedCAI(freqDictHost, sequence, windowSize)
finalResult <- harmonizedSeqErrorCorrection(sequence, initVals,
targetVals, freqDictHost,
aaFreqDictHost,
freqDictHost, windowSize,
model)
}
finalSeq <- finalResult[[1]]
finalVals <- finalResult[[2]]
finalDist <- sum(abs(finalVals - targetVals))
outputs[[counter + 1]] <- list(finalDist, finalSeq, finalVals)
counter <- counter + 1
if (counter %% 10 == 0) {
cat("Harmonized mutant #", counter %/% 10, "complete\n")
}
}
}
}
outputs <- do.call(rbind, outputs)
outputs <- outputs[order(as.numeric(outputs[,1])), ]
outFile <- file(paste(outName, model, "harmonized_sequences.txt",
sep = "_"), "w")
outFile2 <- file(paste(outName, model, "harmonized_values.txt", sep = "_"), "w")
if (length(args) == 8) {
writeLines(paste("Unharmonized CUB metric values: ", toString(unharmonizedVals)), outFile2)
}
writeLines(paste("Target CUB metric values: ", toString(targetVals)), outFile2)
write.table(outputs, file = outFile, col.names = FALSE, row.names = FALSE,
quote = FALSE, sep = "\t")
close(outFile)
close(outFile2)
}
seq_path <- system.file("extdata", "EcolTestSeq.txt", package = "evobioqR")
codonTableOrigin <- system.file("extdata", "ScerCUB.txt", package = "evobioqR")
codonTableDestination <- system.file("extdata", "EcolCUB.txt", package = "evobioqR")
harmonify(seq_path = seq_path, numMutants = 3, windowSize = 10, measure = "MM", outName = "CHARMING_tutorial", codonTableOrigin = codonTableOrigin, codonTableDestination = codonTableDestination)
system.file("extdata", "EcolCUB.txt", package = "evobioqR")
system.file("extdata", "CHARMING_tutorial", package = "evobioqR")
system.file("extdata", "EcolTestSeq.txt", package = "evobioqR")
system.file("extdata", package = "evobioqR")
devtools::check()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
knitr::opts_chunk$set(echo = TRUE)
# Calculate CAI using sliding windows akin to %MinMax
library(psych)  # Load the 'Hmisc' library for the 'Hmisc'::meanGeo function
library(psych)  # Load the 'Hmisc' library for the 'Hmisc'::meanGeo function
devtools::document()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::install()
remove.packages("evobioqR")
outName = system.file("extdata", package = "evobioqR")
system.file("extdata", package = "evobioqR")
devtools::document
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
pkgload::dev_help('renderMolstarViewer')
pkgload::dev_help('MolstarViewerOutput')
devtools::install()
remove.packages("evobioqR")
devtools::load_all()
viewPDB(file_path = "inst/extdata/AF-D9PY08-F1-model_v4.pdb")
pdb <- bio3d::read.pdb("inst/extdata/AF-D9PY08-F1-model_v4.pdb")
pdb
pdb_string <- capture.output(bio3d::write.pdb(pdb))
print(pdb_string)
bio3d::write.pdb(pdb = pdb)
pdb_string
capture.output(write.pdb(pdb))
capture.output(bio3d::write.pdb(pdb))
#' @export
viewPDB <- function(file_path) {
pdb_content <- readLines("path/to/your/pdb/file.pdb")
pdb_string <- paste(pdb_content, collapse = "\n")
}
devtools::load_all()
viewPDB(file_path = "inst/extdata/AF-D9PY08-F1-model_v4.pdb")
devtools::load_all()
viewPDB(file_path = "inst/extdata/AF-D9PY08-F1-model_v4.pdb")
viewPDB(file_path = "inst/extdata/AF-D9PY08-F1-model_v4.pdb")
devtools::load_all()
viewPDB(file_path = "inst/extdata/AF-D9PY08-F1-model_v4.pdb")
gc()
devtools::load_all()
viewPDB(file_path = "inst/extdata/AF-D9PY08-F1-model_v4.pdb")
devtools::load_all()
viewPDB(file_path = "inst/extdata/AF-D9PY08-F1-model_v4.pdb")
gc()
viewPDB(file_path = "inst/extdata/AF-D9PY08-F1-model_v4.pdb")
readLines("inst/extdata/AF-D9PY08-F1-model_v4.pdb")
pdb_content <- readLines("inst/extdata/AF-D9PY08-F1-model_v4.pdb")
pdb_content
pdb_string <- paste(pdb_content, collapse = "\n")
pdb_string
devtools::load_all()
viewPDB(file_path = "inst/extdata/AF-D9PY08-F1-model_v4.pdb")
devtools::load_all()
viewPDB(file_path = "inst/extdata/AF-D9PY08-F1-model_v4.pdb")
viewPDB(file_path = "inst/extdata/AF-D9PY08-F1-model_v4.pdb")
devtools::document()
devtools::load_all()
viewPDB(file_path = "inst/extdata/AF-D9PY08-F1-model_v4.pdb")
