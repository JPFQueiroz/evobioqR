install.packages("roxygen2")
saltify <-
function(initial_volume, desired_percentage, starting_percentage, temperature) {
library(tidyverse)
# Density and molarity of ammonium sulfate solutions
AS <- tibble(temperature = c(0, 10, 20, 25),
specVol = c(0.5281, 0.5357, 0.5414, 0.5435),
sat = c(515.35, 524.60, 536.49, 541.80),
Msat = c(3.90, 3.97, 4.06, 4.10)
)
# Use a linear model to obtain temperature values ranging from 0 to 25
m1 <- lm(specVol~temperature, data = AS)
m2 <- lm(sat~temperature, data = AS)
m3 <- lm(Msat~temperature, data = AS)
ASlm <- tibble(temperature = c(0:25))
AS <- tibble(temperature = c(0:25),
specVol = predict(object = m1, newdata = ASlm),
sat = predict(object = m2, newdata = ASlm),
Msat = predict(object = m3, newdata = ASlm)
)
G <- cbind.data.frame(temperature = AS$temperature,
values = rep(NA, length(AS$temperature)))
for (i in 1:length(AS$temperature)) {
M1 <- starting_percentage/100*AS$Msat[i]
M2 <- desired_percentage/100*AS$Msat[i]
G$values[i] <-
AS$sat[i]*(M2-M1)/(AS$Msat[i]-(AS$specVol[i]/1000*132.14*AS$Msat[i]*M2))
}
G$values <- G$values*initial_volume/1000
return(paste("You need to add ",
round(G[G$temperature == temperature, "values"],
digits = 2),
" g of ammonium sulfate to an initial volume of ",
initial_volume,
" mL in order to increase the ammonium sulfate saturation from ",
starting_percentage, "%", " to ", desired_percentage, "% at ",
temperature, " °C.", sep = ""))
}
saltify(initial_volume = 20,
desired_percentage = 50,
starting_percentage = 0,
temperature = 0)
saltify <-
function(initial_volume, desired_percentage, starting_percentage, temperature) {
library(tidyverse)
# Density and molarity of ammonium sulfate solutions
AS <- tibble(temperature = c(0, 10, 20, 25),
specVol = c(0.5281, 0.5357, 0.5414, 0.5435),
sat = c(515.35, 524.60, 536.49, 541.80),
Msat = c(3.90, 3.97, 4.06, 4.10)
)
# Use a linear model to obtain temperature values ranging from 0 to 25
m1 <- lm(specVol~temperature, data = AS)
m2 <- lm(sat~temperature, data = AS)
m3 <- lm(Msat~temperature, data = AS)
ASlm <- tibble(temperature = c(0:25))
AS <- tibble(temperature = c(0:25),
specVol = predict(object = m1, newdata = ASlm),
sat = predict(object = m2, newdata = ASlm),
Msat = predict(object = m3, newdata = ASlm)
)
G <- cbind.data.frame(temperature = AS$temperature,
values = rep(NA, length(AS$temperature)))
for (i in 1:length(AS$temperature)) {
M1 <- starting_percentage/100*AS$Msat[i]
M2 <- desired_percentage/100*AS$Msat[i]
G$values[i] <-
AS$sat[i]*(M2-M1)/(AS$Msat[i]-(AS$specVol[i]/1000*132.14*AS$Msat[i]*M2))
}
G$values <- G$values*initial_volume/1000
return(paste("You need to add ",
round(G[G$temperature == temperature, "values"],
digits = 2),
" g of ammonium sulfate to an initial volume of ",
initial_volume,
" mL in order to increase the ammonium sulfate saturation from ",
starting_percentage, "%", " to ", desired_percentage, "% at ",
temperature, "°C.", sep = ""))
}
saltify(initial_volume = 20,
desired_percentage = 50,
starting_percentage = 0,
temperature = 0)
saltify(initial_volume = 20,
desired_percentage = 50,
starting_percentage = 0,
temperature = 25)
saltify <-
function(initial_volume, desired_percentage, starting_percentage, temperature) {
library(tidyverse)
# Density and molarity of ammonium sulfate solutions
AS <- tibble(temperature = c(0, 10, 20, 25),
specVol = c(0.5281, 0.5357, 0.5414, 0.5435),
sat = c(515.35, 524.60, 536.49, 541.80),
Msat = c(3.90, 3.97, 4.06, 4.10)
)
# Use a linear model to obtain temperature values ranging from 0 to 25
m1 <- lm(specVol~temperature, data = AS)
m2 <- lm(sat~temperature, data = AS)
m3 <- lm(Msat~temperature, data = AS)
ASlm <- tibble(temperature = c(0:25))
AS <- tibble(temperature = c(0:25),
specVol = predict(object = m1, newdata = ASlm),
sat = predict(object = m2, newdata = ASlm),
Msat = predict(object = m3, newdata = ASlm)
)
G <- cbind.data.frame(temperature = AS$temperature,
values = rep(NA, length(AS$temperature)))
for (i in 1:length(AS$temperature)) {
M1 <- starting_percentage/100*AS$Msat[i]
M2 <- desired_percentage/100*AS$Msat[i]
G$values[i] <-
AS$sat[i]*(M2-M1)/(AS$Msat[i]-(AS$specVol[i]/1000*132.14*AS$Msat[i]*M2))
}
G$values <- G$values*initial_volume/1000
return(paste("Add ",
round(G[G$temperature == temperature, "values"],
digits = 2),
" g of ammonium sulfate to your ",
initial_volume,
" mL solution to crank up the ammonium sulfate saturation from ",
starting_percentage, "%", " to ", desired_percentage, "% at a sizzling ",
temperature, "°C.", sep = ""))
}
saltify(initial_volume = 20,
desired_percentage = 50,
starting_percentage = 0,
temperature = 25)
saltify <-
function(initial_volume, desired_percentage, starting_percentage, temperature) {
library(tidyverse)
# Density and molarity of ammonium sulfate solutions
AS <- tibble(temperature = c(0, 10, 20, 25),
specVol = c(0.5281, 0.5357, 0.5414, 0.5435),
sat = c(515.35, 524.60, 536.49, 541.80),
Msat = c(3.90, 3.97, 4.06, 4.10)
)
# Use a linear model to obtain temperature values ranging from 0 to 25
m1 <- lm(specVol~temperature, data = AS)
m2 <- lm(sat~temperature, data = AS)
m3 <- lm(Msat~temperature, data = AS)
ASlm <- tibble(temperature = c(0:25))
AS <- tibble(temperature = c(0:25),
specVol = predict(object = m1, newdata = ASlm),
sat = predict(object = m2, newdata = ASlm),
Msat = predict(object = m3, newdata = ASlm)
)
G <- cbind.data.frame(temperature = AS$temperature,
values = rep(NA, length(AS$temperature)))
for (i in 1:length(AS$temperature)) {
M1 <- starting_percentage/100*AS$Msat[i]
M2 <- desired_percentage/100*AS$Msat[i]
G$values[i] <-
AS$sat[i]*(M2-M1)/(AS$Msat[i]-(AS$specVol[i]/1000*132.14*AS$Msat[i]*M2))
}
G$values <- G$values*initial_volume/1000
return(paste("Add ",
round(G[G$temperature == temperature, "values"],
digits = 2),
" g of ammonium sulfate to your ",
initial_volume,
" mL solution to crank up the ammonium sulfate saturation from ",
starting_percentage, "%", " to ", desired_percentage,
"% at a sizzling ",
temperature,
"°C! Get ready to rock that protein precipitation!", sep = ""))
}
saltify(initial_volume = 20,
desired_percentage = 50,
starting_percentage = 0,
temperature = 25)
#'
#' @return A string. A fun and energetic message informing you of how many grams of ammonium sulfate
#'         should be added to achieve the desired saturation at the specified temperature.
#'
#' @examples
#' # Example: Calculate the amount of ammonium sulfate for a 100 mL solution
#' # with a starting saturation of 30%, a desired saturation of 50%, and a temperature of 20°C.
#' saltify(100, 50, 30, 20)
#'
#' @export
saltify <-
function(initial_volume, desired_percentage, starting_percentage, temperature) {
library(tidyverse)
# Density and molarity of ammonium sulfate solutions
AS <- tibble(temperature = c(0, 10, 20, 25),
specVol = c(0.5281, 0.5357, 0.5414, 0.5435),
sat = c(515.35, 524.60, 536.49, 541.80),
Msat = c(3.90, 3.97, 4.06, 4.10)
)
# Use a linear model to obtain temperature values ranging from 0 to 25
m1 <- lm(specVol~temperature, data = AS)
m2 <- lm(sat~temperature, data = AS)
m3 <- lm(Msat~temperature, data = AS)
ASlm <- tibble(temperature = c(0:25))
AS <- tibble(temperature = c(0:25),
specVol = predict(object = m1, newdata = ASlm),
sat = predict(object = m2, newdata = ASlm),
Msat = predict(object = m3, newdata = ASlm)
)
G <- cbind.data.frame(temperature = AS$temperature,
values = rep(NA, length(AS$temperature)))
for (i in 1:length(AS$temperature)) {
M1 <- starting_percentage/100*AS$Msat[i]
M2 <- desired_percentage/100*AS$Msat[i]
G$values[i] <-
AS$sat[i]*(M2-M1)/(AS$Msat[i]-(AS$specVol[i]/1000*132.14*AS$Msat[i]*M2))
}
G$values <- G$values*initial_volume/1000
return(paste("Add ",
round(G[G$temperature == temperature, "values"],
digits = 2),
" g of ammonium sulfate to your ",
initial_volume,
" mL solution to crank up the ammonium sulfate saturation from ",
starting_percentage, "%", " to ", desired_percentage,
"% at a sizzling ",
temperature,
"°C! Get ready to rock that protein precipitation!", sep = ""))
}
devtools::document(saltify())
devtools::document(saltify
)
devtools::document()
saltify()
devtools::document()
devtools::document()
devtools::install()
library(evobioqR)
devtools::document()
devtools::install()
devtools::install()
library(evobioqR)
remove.packages("evobioqR")
remove.packages("evobioqR")
devtools::install()
library(evobioqR)
remove.packages("evobioqR")
devtools::document()
devtools::install()
library(evobioqR)
devtools::document()
remove.packages("evobioqR")
devtools::install()
remove.packages("evobioqR")
devtools::install()
devtools::document()
remove.packages("evobioqR")
devtools::install()
library(evobioqR)
#' @references
#' Wingfield, P. (1998). Protein precipitation using ammonium sulfate.
#' *Current protocols in protein science, 13*(1), A-3F.
#'
#' @examples
#' # Example: Calculate the amount of ammonium sulfate for a 100 mL solution
#' # with a starting saturation of 30%, a desired saturation of 50%, and a temperature of 20°C.
#' saltify(100, 50, 30, 20)
#'
#' @export
saltify <- function(initial_volume, desired_percentage, starting_percentage, temperature) {
# Density and molarity of ammonium sulfate solutions
AS <- data.frame(
temperature = c(0, 10, 20, 25),
specVol = c(0.5281, 0.5357, 0.5414, 0.5435),
sat = c(515.35, 524.60, 536.49, 541.80),
Msat = c(3.90, 3.97, 4.06, 4.10)
)
# Create linear models to estimate values for temperatures 0 to 25
m1 <- lm(specVol ~ temperature, data = AS)
m2 <- lm(sat ~ temperature, data = AS)
m3 <- lm(Msat ~ temperature, data = AS)
# Generate predicted values for temperatures 0 to 25
temp_range <- 0:25
AS_full <- data.frame(
temperature = temp_range,
specVol = predict(m1, newdata = data.frame(temperature = temp_range)),
sat = predict(m2, newdata = data.frame(temperature = temp_range)),
Msat = predict(m3, newdata = data.frame(temperature = temp_range))
)
# Initialize result storage
G <- data.frame(
temperature = AS_full$temperature,
values = rep(NA, length(AS_full$temperature))
)
# Calculate the required ammonium sulfate for each temperature
for (i in seq_along(AS_full$temperature)) {
M1 <- starting_percentage / 100 * AS_full$Msat[i]
M2 <- desired_percentage / 100 * AS_full$Msat[i]
G$values[i] <- AS_full$sat[i] * (M2 - M1) /
(AS_full$Msat[i] - (AS_full$specVol[i] / 1000 * 132.14 * AS_full$Msat[i] * M2))
}
# Scale by initial volume
G$values <- G$values * initial_volume / 1000
# Extract and format the result for the specified temperature
result <- round(G[G$temperature == temperature, "values"], digits = 2)
# Return formatted output message
return(paste(
"Add ", result, " g of ammonium sulfate to your ", initial_volume,
" mL solution to crank up the ammonium sulfate saturation from ",
starting_percentage, "% to ", desired_percentage,
"% at a sizzling ", temperature, "°C! Get ready to rock that protein precipitation!",
sep = ""
))
}
saltify(100, 50, 30, 20)
remove.packages("evobioqR")
devtools::install()
library(evobioqR)
remove.packages("evobioqR")
devtools::install()
remove.packages("evobioqR")
devtools::document()
devtools::install()
library(evobioqR)
saltify(100, 60, 0, 18)
remove.packages("evobioqR")
devtools::document()
devtools::install()
devtools::install_bitbucket("Grantlab/bio3d/bio3d-core", ref="core")
devtools::install_bitbucket("Grantlab/bio3d-view")
bio3d.view::view.pdb(pdb = "7BKB")
library(bio3d)
pdb <- read.fasta.pdb("7BKB")
pdb <- read.fasta.pdb(file = "7BKB")
pdb <- read.pdb(file = "7BKB")
pdb
bio3d.view::view.pdb(pdb)
bio3d.view::visualize.pdb(pdb)
install.packages("rgl")
bio3d.view::view.pdb(pdb)
devtools::document()
remove.packages("evobioqR")
devtools::install()
library(evobioqR)
remove.packages("evobioqR")
devtools::document()
devtools::install()
library(evobioqR)
